name: Merge to Main

on:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/*"
      - "**.md"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  NAME: nr-quickstart-helpers

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  # # https://github.com/marketplace/actions/ghcr-io-container-cleanup
  # cleanup-ghcr:
  #   name: Cleanup Container Registry
  #   runs-on: ubuntu-22.04
  #   strategy:
  #     matrix:
  #       component: [backend, frontend]
  #   steps:
  #     - name: Delete old packages
  #       uses: davahome/ghcr-cleanup@v1
  #       with:
  #         delete_untagged: 1
  #         keep_versions: 10
  #         keep_versions_untagged: 0
  #         minimum_days: 14
  #         owner: orgs/bcgov
  #         package: ${{ github.event.repository.name }}/${{ matrix.component }}
  #         skip_tags: prod,test
  #         token: ${{ secrets.PACKAGES_RWD_TOKEN }}

  deploy-test:
    name: TEST Deployment
    # needs:
    # - cleanup-ghcr
    runs-on: ubuntu-22.04
    environment:
      name: tes
    env:
      ZONE: test
    steps:
      - uses: actions/checkout@v3
        with:
          repository: bcgov/nr-quickstart-typescript

      - name: Deploy
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.OC_NAMESPACE }}

          # Do not replace database; 'oc create' kicks up an error if objects already exist
          oc process -f .github/openshift/deploy.database.yml -p ZONE=${{ env.ZONE }} -p NAME=${{ github.event.repository.name }} | oc create -f - || true

          # Process and apply deployment templates
          oc process -f .github/openshift/deploy.backend.yml -p ZONE=${{ env.ZONE }} -p NAME=${{ github.event.repository.name }} \
            -p PROMOTE=${{ github.repository }}/backend:${{ env.ZONE }} | oc apply -f -
          oc process -f .github/openshift/deploy.frontend.yml -p ZONE=${{ env.ZONE }} -p NAME=${{ github.event.repository.name }} \
            -p PROMOTE=${{ github.repository }}/frontend:${{ env.ZONE }} | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-database -w
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-backend -w
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-frontend -w

          # Remove completed build runs, build pods and deployment pods
          for p in $(oc get po | grep "Completed" | awk '{print $1}')
          do
            oc delete po ${p}
          done

  zap-backend:
    name: Backend Pen Tests
    needs:
      - deploy-test
    runs-on: ubuntu-22.04
    steps:
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: https://${{ env.NAME }}-test-backend.apps.silver.devops.gov.bc.ca/
          cmd_options: "-a"
          allow_issue_writing: false
          fail_action: false

  zap-frontend:
    name: Frontend Pen Tests
    needs:
      - deploy-test
    runs-on: ubuntu-22.04
    steps:
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: https://${{ env.NAME }}-test-frontend.apps.silver.devops.gov.bc.ca/
          cmd_options: "-a"
          allow_issue_writing: false
          fail_action: false

  deploy-prod:
    name: PROD Deployment
    needs:
      - zap-backend
      - zap-frontend
    runs-on: ubuntu-22.04
    environment:
      name: prod
    env:
      ZONE: prod
      PREV: test
    steps:
      - uses: actions/checkout@v3
        with:
          repository: bcgov/nr-quickstart-typescript

      - name: Deploy
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.OC_NAMESPACE }}

          # Clear stale images for import/replacement
          if [ $(oc get is -l app=${{ env.NAME }}-${{ env.ZONE }} -o name | grep -v database | wc -l) -gt 0 ]; then
            oc delete is -l app=${{ env.NAME }}-${{ env.ZONE }}
          fi

          # Do not replace database; 'oc create' kicks up an error if objects already exist
          oc process -f .github/openshift/deploy.database.yml -p ZONE=${{ env.ZONE }} -p NAME=${{ github.event.repository.name }} | oc create -f - || true

          # Process and apply deployment templates
          oc process -f .github/openshift/deploy.backend.yml -p ZONE=${{ env.ZONE }} -p NAME=${{ github.event.repository.name }} \
            -p PROMOTE=${{ github.repository }}/backend:${{ env.PREV }} | oc apply -f -
          oc process -f .github/openshift/deploy.frontend.yml -p ZONE=${{ env.ZONE }} -p NAME=${{ github.event.repository.name }} \
            -p PROMOTE=${{ github.repository }}/frontend:${{ env.PREV }} | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-database -w
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-backend -w
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-frontend -w

          # Remove completed build runs, build pods and deployment pods
          for p in $(oc get po | grep "Completed" | awk '{print $1}')
          do
            oc delete po ${p}
          done

  image-promotions:
    name: Promote images to PROD
    needs:
      - deploy-prod
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        component: [backend, frontend]
    steps:
      - uses: shrink/actions-docker-registry-tag@v2
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}/${{ matrix.component }}
          target: test
          tags: prod
